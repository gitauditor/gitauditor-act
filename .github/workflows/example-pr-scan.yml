name: GitAuditor PR Security Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-security-check:
    name: PR Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run GitAuditor Security Scan
        uses: gitauditor/gitauditor-act@v1
        id: gitauditor-scan
        with:
          gitauditor_token: ${{ secrets.GITAUDITOR_TOKEN }}
          scan_type: 'repository'
          check_types: 'branch_protection,secrets,secret_scanning'
          fail_on_issues: 'true'
          severity_threshold: 'high'
          output_format: 'table'
          wait_for_completion: 'true'
          timeout: '15'
      
      - name: Comment PR with results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Remove existing GitAuditor comments
            for (const comment of comments) {
              if (comment.body.includes('GitAuditor Security Scan Results')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }
            
            // Create new comment with results
            const scanId = '${{ steps.gitauditor-scan.outputs.scan_id }}';
            const issuesFound = '${{ steps.gitauditor-scan.outputs.issues_found }}';
            const criticalIssues = '${{ steps.gitauditor-scan.outputs.critical_issues }}';
            const highIssues = '${{ steps.gitauditor-scan.outputs.high_issues }}';
            const scanUrl = '${{ steps.gitauditor-scan.outputs.scan_url }}';
            
            let body = '## üõ°Ô∏è GitAuditor Security Scan Results\n\n';
            
            if (parseInt(issuesFound) === 0) {
              body += '‚úÖ **No security issues found!**\n\n';
            } else {
              body += `‚ö†Ô∏è **Found ${issuesFound} security issue(s)**\n\n`;
              body += `- Critical: ${criticalIssues}\n`;
              body += `- High: ${highIssues}\n\n`;
            }
            
            body += `üìä [View detailed results](${scanUrl})\n`;
            body += `üîç Scan ID: \`${scanId}\`\n\n`;
            body += '---\n';
            body += '*This comment was automatically generated by GitAuditor*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
      
      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitauditor-results.sarif
        continue-on-error: true